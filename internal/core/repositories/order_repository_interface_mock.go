// Code generated by mockery v2.49.0. DO NOT EDIT.

package repositories

import (
	entities "tech-challenge-fase-1/internal/core/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockOrderRepositoryInterface is an autogenerated mock type for the OrderRepositoryInterface type
type MockOrderRepositoryInterface struct {
	mock.Mock
}

type MockOrderRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderRepositoryInterface) EXPECT() *MockOrderRepositoryInterface_Expecter {
	return &MockOrderRepositoryInterface_Expecter{mock: &_m.Mock}
}

// FindOrderByID provides a mock function with given fields: orderID
func (_m *MockOrderRepositoryInterface) FindOrderByID(orderID string) (*entities.Order, error) {
	ret := _m.Called(orderID)

	if len(ret) == 0 {
		panic("no return value specified for FindOrderByID")
	}

	var r0 *entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Order, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Order); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderRepositoryInterface_FindOrderByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOrderByID'
type MockOrderRepositoryInterface_FindOrderByID_Call struct {
	*mock.Call
}

// FindOrderByID is a helper method to define mock.On call
//   - orderID string
func (_e *MockOrderRepositoryInterface_Expecter) FindOrderByID(orderID interface{}) *MockOrderRepositoryInterface_FindOrderByID_Call {
	return &MockOrderRepositoryInterface_FindOrderByID_Call{Call: _e.mock.On("FindOrderByID", orderID)}
}

func (_c *MockOrderRepositoryInterface_FindOrderByID_Call) Run(run func(orderID string)) *MockOrderRepositoryInterface_FindOrderByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderRepositoryInterface_FindOrderByID_Call) Return(_a0 *entities.Order, _a1 error) *MockOrderRepositoryInterface_FindOrderByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderRepositoryInterface_FindOrderByID_Call) RunAndReturn(run func(string) (*entities.Order, error)) *MockOrderRepositoryInterface_FindOrderByID_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: order
func (_m *MockOrderRepositoryInterface) Insert(order *entities.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepositoryInterface_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockOrderRepositoryInterface_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - order *entities.Order
func (_e *MockOrderRepositoryInterface_Expecter) Insert(order interface{}) *MockOrderRepositoryInterface_Insert_Call {
	return &MockOrderRepositoryInterface_Insert_Call{Call: _e.mock.On("Insert", order)}
}

func (_c *MockOrderRepositoryInterface_Insert_Call) Run(run func(order *entities.Order)) *MockOrderRepositoryInterface_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Order))
	})
	return _c
}

func (_c *MockOrderRepositoryInterface_Insert_Call) Return(_a0 error) *MockOrderRepositoryInterface_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepositoryInterface_Insert_Call) RunAndReturn(run func(*entities.Order) error) *MockOrderRepositoryInterface_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: order
func (_m *MockOrderRepositoryInterface) Update(order *entities.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderRepositoryInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOrderRepositoryInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - order *entities.Order
func (_e *MockOrderRepositoryInterface_Expecter) Update(order interface{}) *MockOrderRepositoryInterface_Update_Call {
	return &MockOrderRepositoryInterface_Update_Call{Call: _e.mock.On("Update", order)}
}

func (_c *MockOrderRepositoryInterface_Update_Call) Run(run func(order *entities.Order)) *MockOrderRepositoryInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Order))
	})
	return _c
}

func (_c *MockOrderRepositoryInterface_Update_Call) Return(_a0 error) *MockOrderRepositoryInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderRepositoryInterface_Update_Call) RunAndReturn(run func(*entities.Order) error) *MockOrderRepositoryInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderRepositoryInterface creates a new instance of MockOrderRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderRepositoryInterface {
	mock := &MockOrderRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
