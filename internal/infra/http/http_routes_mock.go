// Code generated by mockery v2.49.1. DO NOT EDIT.

package httpserver

import mock "github.com/stretchr/testify/mock"

// MockHTTPRoutes is an autogenerated mock type for the HTTPRoutes type
type MockHTTPRoutes struct {
	mock.Mock
}

type MockHTTPRoutes_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPRoutes) EXPECT() *MockHTTPRoutes_Expecter {
	return &MockHTTPRoutes_Expecter{mock: &_m.Mock}
}

// DELETE provides a mock function with given fields: _a0, _a1
func (_m *MockHTTPRoutes) DELETE(_a0 string, _a1 ...HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockHTTPRoutes_DELETE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DELETE'
type MockHTTPRoutes_DELETE_Call struct {
	*mock.Call
}

// DELETE is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...HTTPHandlerFunc
func (_e *MockHTTPRoutes_Expecter) DELETE(_a0 interface{}, _a1 ...interface{}) *MockHTTPRoutes_DELETE_Call {
	return &MockHTTPRoutes_DELETE_Call{Call: _e.mock.On("DELETE",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockHTTPRoutes_DELETE_Call) Run(run func(_a0 string, _a1 ...HTTPHandlerFunc)) *MockHTTPRoutes_DELETE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHTTPRoutes_DELETE_Call) Return() *MockHTTPRoutes_DELETE_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPRoutes_DELETE_Call) RunAndReturn(run func(string, ...HTTPHandlerFunc)) *MockHTTPRoutes_DELETE_Call {
	_c.Call.Return(run)
	return _c
}

// GET provides a mock function with given fields: _a0, _a1
func (_m *MockHTTPRoutes) GET(_a0 string, _a1 ...HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockHTTPRoutes_GET_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GET'
type MockHTTPRoutes_GET_Call struct {
	*mock.Call
}

// GET is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...HTTPHandlerFunc
func (_e *MockHTTPRoutes_Expecter) GET(_a0 interface{}, _a1 ...interface{}) *MockHTTPRoutes_GET_Call {
	return &MockHTTPRoutes_GET_Call{Call: _e.mock.On("GET",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockHTTPRoutes_GET_Call) Run(run func(_a0 string, _a1 ...HTTPHandlerFunc)) *MockHTTPRoutes_GET_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHTTPRoutes_GET_Call) Return() *MockHTTPRoutes_GET_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPRoutes_GET_Call) RunAndReturn(run func(string, ...HTTPHandlerFunc)) *MockHTTPRoutes_GET_Call {
	_c.Call.Return(run)
	return _c
}

// PATCH provides a mock function with given fields: _a0, _a1
func (_m *MockHTTPRoutes) PATCH(_a0 string, _a1 ...HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockHTTPRoutes_PATCH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PATCH'
type MockHTTPRoutes_PATCH_Call struct {
	*mock.Call
}

// PATCH is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...HTTPHandlerFunc
func (_e *MockHTTPRoutes_Expecter) PATCH(_a0 interface{}, _a1 ...interface{}) *MockHTTPRoutes_PATCH_Call {
	return &MockHTTPRoutes_PATCH_Call{Call: _e.mock.On("PATCH",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockHTTPRoutes_PATCH_Call) Run(run func(_a0 string, _a1 ...HTTPHandlerFunc)) *MockHTTPRoutes_PATCH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHTTPRoutes_PATCH_Call) Return() *MockHTTPRoutes_PATCH_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPRoutes_PATCH_Call) RunAndReturn(run func(string, ...HTTPHandlerFunc)) *MockHTTPRoutes_PATCH_Call {
	_c.Call.Return(run)
	return _c
}

// POST provides a mock function with given fields: _a0, _a1
func (_m *MockHTTPRoutes) POST(_a0 string, _a1 ...HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockHTTPRoutes_POST_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'POST'
type MockHTTPRoutes_POST_Call struct {
	*mock.Call
}

// POST is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...HTTPHandlerFunc
func (_e *MockHTTPRoutes_Expecter) POST(_a0 interface{}, _a1 ...interface{}) *MockHTTPRoutes_POST_Call {
	return &MockHTTPRoutes_POST_Call{Call: _e.mock.On("POST",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockHTTPRoutes_POST_Call) Run(run func(_a0 string, _a1 ...HTTPHandlerFunc)) *MockHTTPRoutes_POST_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHTTPRoutes_POST_Call) Return() *MockHTTPRoutes_POST_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPRoutes_POST_Call) RunAndReturn(run func(string, ...HTTPHandlerFunc)) *MockHTTPRoutes_POST_Call {
	_c.Call.Return(run)
	return _c
}

// PUT provides a mock function with given fields: _a0, _a1
func (_m *MockHTTPRoutes) PUT(_a0 string, _a1 ...HTTPHandlerFunc) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockHTTPRoutes_PUT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PUT'
type MockHTTPRoutes_PUT_Call struct {
	*mock.Call
}

// PUT is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...HTTPHandlerFunc
func (_e *MockHTTPRoutes_Expecter) PUT(_a0 interface{}, _a1 ...interface{}) *MockHTTPRoutes_PUT_Call {
	return &MockHTTPRoutes_PUT_Call{Call: _e.mock.On("PUT",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockHTTPRoutes_PUT_Call) Run(run func(_a0 string, _a1 ...HTTPHandlerFunc)) *MockHTTPRoutes_PUT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]HTTPHandlerFunc, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(HTTPHandlerFunc)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHTTPRoutes_PUT_Call) Return() *MockHTTPRoutes_PUT_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPRoutes_PUT_Call) RunAndReturn(run func(string, ...HTTPHandlerFunc)) *MockHTTPRoutes_PUT_Call {
	_c.Call.Return(run)
	return _c
}

// SetBasePath provides a mock function with given fields: basePath
func (_m *MockHTTPRoutes) SetBasePath(basePath string) {
	_m.Called(basePath)
}

// MockHTTPRoutes_SetBasePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBasePath'
type MockHTTPRoutes_SetBasePath_Call struct {
	*mock.Call
}

// SetBasePath is a helper method to define mock.On call
//   - basePath string
func (_e *MockHTTPRoutes_Expecter) SetBasePath(basePath interface{}) *MockHTTPRoutes_SetBasePath_Call {
	return &MockHTTPRoutes_SetBasePath_Call{Call: _e.mock.On("SetBasePath", basePath)}
}

func (_c *MockHTTPRoutes_SetBasePath_Call) Run(run func(basePath string)) *MockHTTPRoutes_SetBasePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHTTPRoutes_SetBasePath_Call) Return() *MockHTTPRoutes_SetBasePath_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPRoutes_SetBasePath_Call) RunAndReturn(run func(string)) *MockHTTPRoutes_SetBasePath_Call {
	_c.Call.Return(run)
	return _c
}

// SetSwagger provides a mock function with given fields: _a0
func (_m *MockHTTPRoutes) SetSwagger(_a0 string) {
	_m.Called(_a0)
}

// MockHTTPRoutes_SetSwagger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSwagger'
type MockHTTPRoutes_SetSwagger_Call struct {
	*mock.Call
}

// SetSwagger is a helper method to define mock.On call
//   - _a0 string
func (_e *MockHTTPRoutes_Expecter) SetSwagger(_a0 interface{}) *MockHTTPRoutes_SetSwagger_Call {
	return &MockHTTPRoutes_SetSwagger_Call{Call: _e.mock.On("SetSwagger", _a0)}
}

func (_c *MockHTTPRoutes_SetSwagger_Call) Run(run func(_a0 string)) *MockHTTPRoutes_SetSwagger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHTTPRoutes_SetSwagger_Call) Return() *MockHTTPRoutes_SetSwagger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPRoutes_SetSwagger_Call) RunAndReturn(run func(string)) *MockHTTPRoutes_SetSwagger_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPRoutes creates a new instance of MockHTTPRoutes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPRoutes(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPRoutes {
	mock := &MockHTTPRoutes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
