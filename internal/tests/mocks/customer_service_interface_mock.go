package mocks

import (
	entities "tech-challenge-fase-1/internal/core/entities"

	mock "github.com/stretchr/testify/mock"

	valueobjects "tech-challenge-fase-1/internal/core/value_objects"
)

// MockCustomerService is an autogenerated mock type for the CustomerService type
type MockCustomerService struct {
	mock.Mock
}

type MockCustomerService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerService) EXPECT() *MockCustomerService_Expecter {
	return &MockCustomerService_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function with given fields: customer
func (_m *MockCustomerService) CreateCustomer(customer *entities.Customer) (*entities.Customer, error) {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 *entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.Customer) (*entities.Customer, error)); ok {
		return rf(customer)
	}
	if rf, ok := ret.Get(0).(func(*entities.Customer) *entities.Customer); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerService_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type MockCustomerService_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - customer *entities.Customer
func (_e *MockCustomerService_Expecter) CreateCustomer(customer interface{}) *MockCustomerService_CreateCustomer_Call {
	return &MockCustomerService_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", customer)}
}

func (_c *MockCustomerService_CreateCustomer_Call) Run(run func(customer *entities.Customer)) *MockCustomerService_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Customer))
	})
	return _c
}

func (_c *MockCustomerService_CreateCustomer_Call) Return(_a0 *entities.Customer, _a1 error) *MockCustomerService_CreateCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerService_CreateCustomer_Call) RunAndReturn(run func(*entities.Customer) (*entities.Customer, error)) *MockCustomerService_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerByCPF provides a mock function with given fields: cpf
func (_m *MockCustomerService) GetCustomerByCPF(cpf *valueobjects.CPF) (*entities.Customer, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByCPF")
	}

	var r0 *entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*valueobjects.CPF) (*entities.Customer, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(*valueobjects.CPF) *entities.Customer); ok {
		r0 = rf(cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*valueobjects.CPF) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerService_GetCustomerByCPF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerByCPF'
type MockCustomerService_GetCustomerByCPF_Call struct {
	*mock.Call
}

// GetCustomerByCPF is a helper method to define mock.On call
//   - cpf *valueobjects.CPF
func (_e *MockCustomerService_Expecter) GetCustomerByCPF(cpf interface{}) *MockCustomerService_GetCustomerByCPF_Call {
	return &MockCustomerService_GetCustomerByCPF_Call{Call: _e.mock.On("GetCustomerByCPF", cpf)}
}

func (_c *MockCustomerService_GetCustomerByCPF_Call) Run(run func(cpf *valueobjects.CPF)) *MockCustomerService_GetCustomerByCPF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*valueobjects.CPF))
	})
	return _c
}

func (_c *MockCustomerService_GetCustomerByCPF_Call) Return(_a0 *entities.Customer, _a1 error) *MockCustomerService_GetCustomerByCPF_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerService_GetCustomerByCPF_Call) RunAndReturn(run func(*valueobjects.CPF) (*entities.Customer, error)) *MockCustomerService_GetCustomerByCPF_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerById provides a mock function with given fields: id
func (_m *MockCustomerService) GetCustomerById(id string) (*entities.Customer, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerById")
	}

	var r0 *entities.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Customer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Customer); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerService_GetCustomerById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerById'
type MockCustomerService_GetCustomerById_Call struct {
	*mock.Call
}

// GetCustomerById is a helper method to define mock.On call
//   - id string
func (_e *MockCustomerService_Expecter) GetCustomerById(id interface{}) *MockCustomerService_GetCustomerById_Call {
	return &MockCustomerService_GetCustomerById_Call{Call: _e.mock.On("GetCustomerById", id)}
}

func (_c *MockCustomerService_GetCustomerById_Call) Run(run func(id string)) *MockCustomerService_GetCustomerById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCustomerService_GetCustomerById_Call) Return(_a0 *entities.Customer, _a1 error) *MockCustomerService_GetCustomerById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerService_GetCustomerById_Call) RunAndReturn(run func(string) (*entities.Customer, error)) *MockCustomerService_GetCustomerById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomerService creates a new instance of MockCustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerService {
	mock := &MockCustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
