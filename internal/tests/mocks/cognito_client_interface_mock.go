package mocks

import (
	cognitoidentityprovider "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	mock "github.com/stretchr/testify/mock"
)

// MockCognitoClientInterface is an autogenerated mock type for the CognitoClientInterface type
type MockCognitoClientInterface struct {
	mock.Mock
}

type MockCognitoClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCognitoClientInterface) EXPECT() *MockCognitoClientInterface_Expecter {
	return &MockCognitoClientInterface_Expecter{mock: &_m.Mock}
}

// AdminCreateUser provides a mock function with given fields: input
func (_m *MockCognitoClientInterface) AdminCreateUser(input *cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for AdminCreateUser")
	}

	var r0 *cognitoidentityprovider.AdminCreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminCreateUserInput) *cognitoidentityprovider.AdminCreateUserOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminCreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminCreateUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoClientInterface_AdminCreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminCreateUser'
type MockCognitoClientInterface_AdminCreateUser_Call struct {
	*mock.Call
}

// AdminCreateUser is a helper method to define mock.On call
//   - input *cognitoidentityprovider.AdminCreateUserInput
func (_e *MockCognitoClientInterface_Expecter) AdminCreateUser(input interface{}) *MockCognitoClientInterface_AdminCreateUser_Call {
	return &MockCognitoClientInterface_AdminCreateUser_Call{Call: _e.mock.On("AdminCreateUser", input)}
}

func (_c *MockCognitoClientInterface_AdminCreateUser_Call) Run(run func(input *cognitoidentityprovider.AdminCreateUserInput)) *MockCognitoClientInterface_AdminCreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cognitoidentityprovider.AdminCreateUserInput))
	})
	return _c
}

func (_c *MockCognitoClientInterface_AdminCreateUser_Call) Return(_a0 *cognitoidentityprovider.AdminCreateUserOutput, _a1 error) *MockCognitoClientInterface_AdminCreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoClientInterface_AdminCreateUser_Call) RunAndReturn(run func(*cognitoidentityprovider.AdminCreateUserInput) (*cognitoidentityprovider.AdminCreateUserOutput, error)) *MockCognitoClientInterface_AdminCreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// AdminGetUser provides a mock function with given fields: input
func (_m *MockCognitoClientInterface) AdminGetUser(input *cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for AdminGetUser")
	}

	var r0 *cognitoidentityprovider.AdminGetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.AdminGetUserInput) *cognitoidentityprovider.AdminGetUserOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.AdminGetUserInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoClientInterface_AdminGetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdminGetUser'
type MockCognitoClientInterface_AdminGetUser_Call struct {
	*mock.Call
}

// AdminGetUser is a helper method to define mock.On call
//   - input *cognitoidentityprovider.AdminGetUserInput
func (_e *MockCognitoClientInterface_Expecter) AdminGetUser(input interface{}) *MockCognitoClientInterface_AdminGetUser_Call {
	return &MockCognitoClientInterface_AdminGetUser_Call{Call: _e.mock.On("AdminGetUser", input)}
}

func (_c *MockCognitoClientInterface_AdminGetUser_Call) Run(run func(input *cognitoidentityprovider.AdminGetUserInput)) *MockCognitoClientInterface_AdminGetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cognitoidentityprovider.AdminGetUserInput))
	})
	return _c
}

func (_c *MockCognitoClientInterface_AdminGetUser_Call) Return(_a0 *cognitoidentityprovider.AdminGetUserOutput, _a1 error) *MockCognitoClientInterface_AdminGetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoClientInterface_AdminGetUser_Call) RunAndReturn(run func(*cognitoidentityprovider.AdminGetUserInput) (*cognitoidentityprovider.AdminGetUserOutput, error)) *MockCognitoClientInterface_AdminGetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: input
func (_m *MockCognitoClientInterface) ListUsers(input *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *cognitoidentityprovider.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInput) *cognitoidentityprovider.ListUsersOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUsersInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCognitoClientInterface_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockCognitoClientInterface_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - input *cognitoidentityprovider.ListUsersInput
func (_e *MockCognitoClientInterface_Expecter) ListUsers(input interface{}) *MockCognitoClientInterface_ListUsers_Call {
	return &MockCognitoClientInterface_ListUsers_Call{Call: _e.mock.On("ListUsers", input)}
}

func (_c *MockCognitoClientInterface_ListUsers_Call) Run(run func(input *cognitoidentityprovider.ListUsersInput)) *MockCognitoClientInterface_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cognitoidentityprovider.ListUsersInput))
	})
	return _c
}

func (_c *MockCognitoClientInterface_ListUsers_Call) Return(_a0 *cognitoidentityprovider.ListUsersOutput, _a1 error) *MockCognitoClientInterface_ListUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCognitoClientInterface_ListUsers_Call) RunAndReturn(run func(*cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error)) *MockCognitoClientInterface_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCognitoClientInterface creates a new instance of MockCognitoClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCognitoClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCognitoClientInterface {
	mock := &MockCognitoClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
