package mocks

import (
	"tech-challenge-fase-1/internal/infra/database"

	mock "github.com/stretchr/testify/mock"
)

// MockConnectionDB is an autogenerated mock type for the ConnectionDB type
type MockConnectionDB struct {
	mock.Mock
}

type MockConnectionDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionDB) EXPECT() *MockConnectionDB_Expecter {
	return &MockConnectionDB_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockConnectionDB) Close() {
	_m.Called()
}

// MockConnectionDB_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnectionDB_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnectionDB_Expecter) Close() *MockConnectionDB_Close_Call {
	return &MockConnectionDB_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnectionDB_Close_Call) Run(run func()) *MockConnectionDB_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionDB_Close_Call) Return() *MockConnectionDB_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnectionDB_Close_Call) RunAndReturn(run func()) *MockConnectionDB_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: sql, args
func (_m *MockConnectionDB) Exec(sql string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(sql, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnectionDB_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockConnectionDB_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - sql string
//   - args ...interface{}
func (_e *MockConnectionDB_Expecter) Exec(sql interface{}, args ...interface{}) *MockConnectionDB_Exec_Call {
	return &MockConnectionDB_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{sql}, args...)...)}
}

func (_c *MockConnectionDB_Exec_Call) Run(run func(sql string, args ...interface{})) *MockConnectionDB_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConnectionDB_Exec_Call) Return(_a0 error) *MockConnectionDB_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionDB_Exec_Call) RunAndReturn(run func(string, ...interface{}) error) *MockConnectionDB_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: sql, args
func (_m *MockConnectionDB) Query(sql string, args ...interface{}) (database.RowsDB, error) {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 database.RowsDB
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (database.RowsDB, error)); ok {
		return rf(sql, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) database.RowsDB); ok {
		r0 = rf(sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.RowsDB)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(sql, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConnectionDB_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockConnectionDB_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - sql string
//   - args ...interface{}
func (_e *MockConnectionDB_Expecter) Query(sql interface{}, args ...interface{}) *MockConnectionDB_Query_Call {
	return &MockConnectionDB_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{sql}, args...)...)}
}

func (_c *MockConnectionDB_Query_Call) Run(run func(sql string, args ...interface{})) *MockConnectionDB_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConnectionDB_Query_Call) Return(_a0 database.RowsDB, _a1 error) *MockConnectionDB_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConnectionDB_Query_Call) RunAndReturn(run func(string, ...interface{}) (database.RowsDB, error)) *MockConnectionDB_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: sql, args
func (_m *MockConnectionDB) QueryRow(sql string, args ...interface{}) database.RowDB {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 database.RowDB
	if rf, ok := ret.Get(0).(func(string, ...interface{}) database.RowDB); ok {
		r0 = rf(sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.RowDB)
		}
	}

	return r0
}

// MockConnectionDB_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockConnectionDB_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - sql string
//   - args ...interface{}
func (_e *MockConnectionDB_Expecter) QueryRow(sql interface{}, args ...interface{}) *MockConnectionDB_QueryRow_Call {
	return &MockConnectionDB_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{sql}, args...)...)}
}

func (_c *MockConnectionDB_QueryRow_Call) Run(run func(sql string, args ...interface{})) *MockConnectionDB_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConnectionDB_QueryRow_Call) Return(_a0 database.RowDB) *MockConnectionDB_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnectionDB_QueryRow_Call) RunAndReturn(run func(string, ...interface{}) database.RowDB) *MockConnectionDB_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionDB creates a new instance of MockConnectionDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionDB {
	mock := &MockConnectionDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
